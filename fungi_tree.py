import numpy as np
import torch
from torch.autograd import Variable
import torch.nn as nn

trees = [[0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0], [2, 2, 1, 0, 0, 0], [3, 3, 2, 0, 0, 0], [4, 4, 0, 0, 0, 0], [5, 5, 3, 1, 1, 0], [6, 6, 4, 0, 0, 0], [7, 7, 5, 0, 0, 0], [8, 8, 6, 0, 0, 0], [9, 9, 7, 2, 0, 0], [10, 1, 0, 3, 1, 0], [11, 10, 8, 2, 0, 0], [12, 11, 9, 0, 0, 0], [13, 12, 10, 0, 0, 0], [14, 13, 10, 0, 0, 0], [15, 14, 11, 4, 2, 1], [16, 15, 12, 5, 0, 0], [17, 16, 0, 0, 0, 0], [18, 13, 10, 0, 0, 0], [19, 17, 13, 2, 0, 0], [20, 18, 14, 0, 0, 0], [21, 19, 13, 2, 0, 0], [22, 20, 15, 0, 0, 0], [23, 11, 9, 0, 0, 0], [24, 21, 16, 6, 3, 1], [25, 22, 12, 5, 0, 0], [26, 23, 9, 0, 0, 0], [27, 7, 5, 0, 0, 0], [28, 24, 17, 7, 0, 0], [29, 8, 6, 0, 0, 0], [30, 25, 18, 5, 0, 0], [31, 26, 19, 0, 0, 0], [32, 27, 20, 8, 4, 1], [33, 28, 9, 0, 0, 0], [34, 29, 0, 0, 1, 0], [35, 30, 21, 0, 0, 0], [36, 31, 22, 0, 0, 0], [37, 32, 12, 5, 0, 0], [38, 33, 23, 0, 0, 0], [39, 34, 24, 0, 0, 0], [40, 35, 25, 6, 3, 1], [41, 36, 26, 9, 5, 0], [42, 37, 14, 0, 0, 0], [43, 38, 10, 0, 0, 0], [44, 39, 15, 0, 0, 0], [45, 40, 27, 10, 0, 0], [46, 41, 3, 1, 1, 0], [47, 4, 0, 0, 0, 0], [48, 27, 20, 8, 4, 1], [49, 21, 16, 6, 3, 1], [50, 42, 28, 1, 0, 0], [51, 8, 6, 0, 0, 0], [52, 6, 4, 0, 1, 0], [53, 43, 29, 11, 6, 2], [54, 7, 5, 0, 0, 0], [55, 44, 10, 0, 0, 0], [56, 33, 30, 0, 0, 0], [57, 45, 28, 1, 0, 0], [58, 46, 31, 12, 0, 0], [59, 47, 32, 2, 0, 0], [60, 34, 24, 0, 0, 0], [61, 32, 12, 5, 0, 0], [62, 20, 15, 0, 0, 0], [63, 20, 15, 0, 0, 0], [64, 48, 33, 13, 0, 0], [65, 49, 23, 0, 0, 0], [66, 50, 34, 0, 0, 0], [67, 51, 35, 2, 0, 0], [68, 8, 6, 0, 0, 0], [69, 52, 1, 0, 0, 0], [70, 53, 11, 4, 2, 1], [71, 18, 14, 0, 0, 0], [72, 54, 0, 0, 0, 0], [73, 21, 16, 6, 3, 1], [74, 6, 4, 0, 0, 0], [75, 55, 33, 13, 0, 0], [76, 56, 36, 0, 0, 0], [77, 57, 23, 0, 0, 0], [78, 58, 37, 5, 0, 0], [79, 4, 0, 0, 0, 0], [80, 59, 28, 1, 0, 0], [81, 60, 38, 2, 0, 0], [82, 48, 33, 13, 0, 0], [83, 61, 9, 0, 0, 0], [84, 62, 22, 0, 0, 0], [85, 63, 39, 14, 0, 0], [86, 64, 10, 0, 0, 0], [87, 48, 33, 13, 0, 0], [88, 65, 40, 5, 0, 0], [89, 33, 23, 0, 0, 0], [90, 66, 9, 0, 0, 0], [91, 67, 41, 15, 7, 1], [92, 68, 19, 0, 0, 0], [93, 55, 33, 13, 0, 0], [94, 48, 33, 13, 0, 0], [95, 55, 33, 13, 0, 0], [96, 69, 42, 16, 0, 0], [97, 70, 43, 17, 8, 3], [98, 27, 20, 8, 4, 1], [99, 6, 4, 0, 0, 0], [100, 71, 44, 18, 9, 1], [101, 13, 10, 0, 0, 0], [102, 72, 12, 5, 0, 0], [103, 73, 45, 0, 0, 0], [104, 34, 24, 0, 0, 0], [105, 8, 6, 0, 0, 0], [106, 48, 33, 13, 0, 0], [107, 29, 0, 0, 1, 0], [108, 34, 24, 0, 0, 0], [109, 48, 33, 13, 0, 0], [110, 55, 33, 13, 0, 0], [111, 74, 46, 0, 0, 0], [112, 75, 39, 14, 1, 0], [113, 13, 10, 0, 0, 0], [114, 76, 38, 2, 0, 0], [115, 77, 47, 2, 0, 0], [116, 29, 0, 0, 1, 0], [117, 67, 41, 15, 10, 1], [118, 55, 33, 13, 0, 0], [119, 48, 33, 13, 0, 0], [120, 34, 24, 0, 0, 0], [121, 78, 48, 13, 0, 0], [122, 30, 21, 0, 0, 0], [123, 79, 12, 5, 0, 0], [124, 80, 49, 15, 10, 1], [125, 55, 33, 13, 0, 0], [126, 81, 28, 1, 0, 0], [127, 82, 50, 19, 0, 0], [128, 34, 24, 0, 0, 0], [129, 48, 33, 13, 0, 0], [130, 83, 27, 10, 0, 0], [131, 7, 5, 0, 0, 0], [132, 8, 6, 0, 0, 0], [133, 55, 33, 13, 0, 0], [134, 49, 9, 0, 0, 0], [135, 55, 33, 13, 0, 0], [136, 84, 51, 20, 0, 0], [137, 69, 42, 16, 0, 0], [138, 53, 11, 4, 2, 1], [139, 85, 52, 21, 11, 0], [140, 86, 0, 0, 0, 0], [141, 87, 19, 0, 0, 0], [142, 72, 12, 5, 0, 0], [143, 8, 6, 0, 0, 0], [144, 88, 53, 5, 0, 0], [145, 89, 12, 5, 0, 0], [146, 90, 54, 0, 0, 0], [147, 91, 12, 5, 0, 0], [148, 92, 47, 2, 0, 0], [149, 93, 48, 13, 0, 0], [150, 7, 5, 0, 0, 0], [151, 8, 6, 0, 0, 0], [152, 94, 41, 15, 7, 1], [153, 7, 5, 0, 0, 0], [154, 95, 55, 13, 0, 0], [155, 7, 5, 0, 0, 0], [156, 96, 33, 13, 0, 0], [157, 97, 8, 2, 0, 0], [158, 98, 47, 2, 0, 0], [159, 99, 56, 0, 0, 0], [160, 52, 1, 0, 0, 0], [161, 26, 19, 0, 0, 0], [162, 55, 33, 13, 0, 0], [163, 100, 57, 2, 0, 0], [164, 101, 12, 5, 0, 0], [165, 29, 0, 0, 0, 0], [166, 102, 58, 0, 0, 0], [167, 103, 9, 0, 0, 0], [168, 48, 33, 13, 0, 0], [169, 34, 24, 0, 0, 0], [170, 101, 12, 5, 0, 0], [171, 59, 28, 1, 0, 0], [172, 104, 28, 1, 0, 0], [173, 15, 12, 5, 0, 0], [174, 105, 12, 5, 0, 0], [175, 106, 28, 1, 0, 0], [176, 107, 12, 5, 0, 0], [177, 102, 58, 0, 0, 0], [178, 108, 13, 2, 0, 0], [179, 108, 13, 2, 0, 0], [180, 6, 4, 0, 0, 0], [181, 109, 59, 0, 0, 0], [182, 8, 6, 0, 0, 0], [183, 13, 10, 0, 0, 0], [184, 110, 60, 22, 4, 1], [185, 111, 61, 13, 0, 0], [186, 112, 62, 2, 0, 0], [187, 113, 28, 1, 0, 0], [188, 114, 63, 0, 0, 0], [189, 115, 58, 0, 0, 0], [190, 116, 26, 9, 5, 0], [191, 117, 64, 0, 1, 0], [192, 34, 24, 0, 1, 0], [193, 59, 28, 1, 0, 0], [194, 118, 8, 2, 0, 0], [195, 119, 65, 5, 0, 0], [196, 120, 13, 2, 0, 0], [197, 6, 4, 0, 1, 0], [198, 121, 6, 0, 0, 0], [199, 122, 66, 0, 0, 0]]

def get_tree_target(pair_1,pair_2):

    tree_target_list = []


    for i in range(pair_1.size(0)):

        if trees[pair_1[i]][0] == trees[pair_2[i]][0]:
            tree_target_list.append(0)

        elif trees[pair_1[i]][1] == trees[pair_2[i]][1]:
            tree_target_list.append(1)

        elif trees[pair_1[i]][2] == trees[pair_2[i]][2]:
            tree_target_list.append(2)
            
        elif trees[pair_1[i]][3] == trees[pair_2[i]][3]:
            tree_target_list.append(3)
            
        elif trees[pair_1[i]][4] == trees[pair_2[i]][4]:
            tree_target_list.append(4)

        elif trees[pair_1[i]][5] == trees[pair_2[i]][5]:
            tree_target_list.append(5)

        else:
            tree_target_list.append(6)



    tree_target_list = Variable(torch.from_numpy(np.array(tree_target_list)).cuda())
    

    return tree_target_list


